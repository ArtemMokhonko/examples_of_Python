def bubble_sort(lst):
    n = len(lst)
    for i in range(n-1):
        for j in range(0, n-i-1): 
            if lst[j] > lst[j+1] :
                lst[j], lst[j+1] = lst[j+1], lst[j] 
    return lst

numbers = [8, 2, 1, 4, 5]
print(bubble_sort(numbers))


"""
–°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –≤—Å—Ç–∞–≤–∫–∞–º–∏ (Insertion sort). –ß–∞—Å–æ–≤–∞ —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å ‚Äî ùëÇ(ùëõ2)
"""
def insertion_sort(lst):
    for i in range(1, len(lst)):
        key = lst[i]
        j = i-1
        while j >=0 and key < lst[j] :
                lst[j+1] = lst[j]
                j -= 1
        lst[j+1] = key 
    return lst

numbers = [5, 3, 8, 4, 2]
print(insertion_sort(numbers))


"""
–ê–ª–≥–æ—Ä–∏—Ç–º –ø—Ä—è–º–æ–≥–æ –≤–∏–±–æ—Ä—É (Selection Sort) –ß–∞—Å–æ–≤–∞ —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å ‚Äî ùëÇ(ùëõ2)
"""
def selection_sort(arr):
    n = len(arr)
    for i in range(n):
        min_idx = i
        for j in range(i+1, n):
            if arr[j] < arr[min_idx]:
                min_idx = j
        arr[i], arr[min_idx] = arr[min_idx], arr[i]
    return arr

numbers = [5, 3, 8, 4, 2]
print(selection_sort(numbers))


"""
–®–≤–∏–¥–∫–µ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è (Quick sort) (—Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è–º –ì–æ–∞—Ä–∞)
–ß–∞—Å–æ–≤–∞ —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å ‚Äî ùëÇ(ùëõ‚ãÖlogùëõ) —É —Å–µ—Ä–µ–¥–Ω—å–æ–º—É –≤–∏–ø–∞–¥–∫—É, –∞–ª–µ O(n2) —É –Ω–∞–π–≥—ñ—Ä—à–æ–º—É –≤–∏–ø–∞–¥–∫—É
"""
def quicksort(arr):
    if len(arr) <= 1:
        return arr
    pivot = arr[len(arr) // 2]
    left = [x for x in arr if x < pivot]
    middle = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]
    return quicksort(left) + middle + quicksort(right)

print(quicksort([7, 12, 3, 5, 8, 11, 20, 1, 6, 14]))


"""
–°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∑–ª–∏—Ç—Ç—è–º (Merge sort) –ß–∞—Å–æ–≤–∞ —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å ùëÇ(ùëõ‚ãÖlogùëõ)
"""
def merge_sort(arr):
    if len(arr) <= 1:
        return arr

    mid = len(arr) // 2
    left_half = arr[:mid]
    right_half = arr[mid:]

    return merge(merge_sort(left_half), merge_sort(right_half))

def merge(left, right):
    merged = []
    left_index = 0
    right_index = 0

    # –°–ø–æ—á–∞—Ç–∫—É –æ–±'—î–¥–Ω–∞–π—Ç–µ –º–µ–Ω—à—ñ –µ–ª–µ–º–µ–Ω—Ç–∏
    while left_index < len(left) and right_index < len(right):
        if left[left_index] <= right[right_index]:
            merged.append(left[left_index])
            left_index += 1
        else:
            merged.append(right[right_index])
            right_index += 1

    # –Ø–∫—â–æ –≤ –ª—ñ–≤—ñ–π –∞–±–æ –ø—Ä–∞–≤—ñ–π –ø–æ–ª–æ–≤–∏–Ω—ñ –∑–∞–ª–∏—à–∏–ª–∏—Å—è –µ–ª–µ–º–µ–Ω—Ç–∏, 
		# –¥–æ–¥–∞–π—Ç–µ —ó—Ö –¥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
    while left_index < len(left):
        merged.append(left[left_index])
        left_index += 1

    while right_index < len(right):
        merged.append(right[right_index])
        right_index += 1

    return merged

print(merge_sort([7, 12, 3, 5, 8, 11, 20, 1, 6, 14]))


"""
–ê–ª–≥–æ—Ä–∏—Ç–º —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –®–µ–ª–ª–∞. –ß–∞—Å–æ–≤–∞ —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å ‚Äî ùëÇ(ùëõ2)
"""
def shell_sort(arr):
    n = len(arr)
    gap = n // 2

    while gap > 0:
        print(f"GAP: =============={gap}===================")
        for i in range(gap, n):
            temp = arr[i]
            j = i
            print(f"i: ----------------- {i} ----------------")
            print(f"–°–ø–∏—Å–æ–∫ –Ω–∞ –ø–æ—á–∞—Ç–∫—É —ñ—Ç–µ—Ä–∞—Ü—ñ—ó {i}: {arr}")
            print(f"j: {j}, temp: {temp}, gap: {gap}")
            print(f"–ü–æ—Ä—ñ–≤–Ω—é—î–º–æ –µ–ª–µ–º–µ–Ω—Ç–∏: {arr[j - gap]} > {temp}")
            while j >= gap and arr[j - gap] > temp:
                print(
                    f"–í–∏–∫–æ–Ω–∞–Ω–æ –æ–±–º—ñ–Ω –≤ —Ü–∏–∫–ª—É while: –∑–Ω–∞—á–µ–Ω–Ω—è {arr[j - gap]} –∑–∞–º—ñ–Ω–∏–ª–æ {arr[j]}"
                )
                arr[j] = arr[j - gap]
                print(f"–°–ø–∏—Å–æ–∫ –∑–º—ñ–Ω–∏–≤—Å—è j: {j}: {arr}")
                j -= gap
                print(f"–ó–º—ñ–Ω–∏–ª–∏ j –≤–ª—ñ–≤–æ: {j}")
            print(f"–í –∫—ñ–Ω—Ü—ñ —Ü–∏–∫–ª—É for: –∑–Ω–∞—á–µ–Ω–Ω—è {temp} –∑–∞–º—ñ–Ω–∏–ª–æ {arr[j]}")
            arr[j] = temp
            print(f"–°–ø–∏—Å–æ–∫ –Ω–∞ –∫—ñ–Ω–µ—Ü—å —ñ—Ç–µ—Ä–∞—Ü—ñ—ó {i}: {arr}")
        gap //= 2
        if gap == 0:
            print("–°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    return arr

numbers = [5, 3, 8, 4, 2]
# numbers = [64, 34, 25, 12, 22, 11, 90]
print(shell_sort(numbers))

"""
–ê–ª–≥–æ—Ä–∏—Ç–º –ø–æ—Ä–æ–∑—Ä—è–¥–Ω–æ–≥–æ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è (Radix Sort)
"""
import matplotlib.pyplot as plt  # Імпортує бібліотеку для малювання графіків.
import matplotlib.patches as patches  # Імпортує модуль для створення графічних об'єктів, таких як полігони.

def draw_triangle(vertices, ax):  # Визначає функцію для малювання трикутника.
    triangle = patches.Polygon(vertices, fill=False, edgecolor='black')  # Створює об'єкт трикутника з вершинами 'vertices', без заливки (fill=False) та з чорною рамкою (edgecolor='black').
    ax.add_patch(triangle)  # Додає трикутник на осі 'ax'.

def midpoint(point1, point2):  # Визначає функцію для обчислення середньої точки між двома точками.
    return [(point1[0] + point2[0]) / 2, (point1[1] + point2[1]) / 2]  # Обчислює середні координати x та y між точками 'point1' та 'point2'.

def sierpinski(vertices, level, ax):  # Визначає рекурсивну функцію для малювання трикутника Серпінського.
    draw_triangle(vertices, ax)  # Малює трикутник з заданими вершинами 'vertices'.
    if level > 0:  # Якщо рівень рекурсії більше нуля, продовжує рекурсію.
        sierpinski([vertices[0], midpoint(vertices[0], vertices[1]), midpoint(vertices[0], vertices[2])], level-1, ax)  # Рекурсивно малює перший підтрикутник.
        sierpinski([vertices[1], midpoint(vertices[0], vertices[1]), midpoint(vertices[1], vertices[2])], level-1, ax)  # Рекурсивно малює другий підтрикутник.
        sierpinski([vertices[2], midpoint(vertices[2], vertices[1]), midpoint(vertices[0], vertices[2])], level-1, ax)  # Рекурсивно малює третій підтрикутник.

def main():  # Визначає основну функцію для налаштування та відображення малюнка.
    fig, ax = plt.subplots()  # Створює фігуру та осі для малювання.
    ax.set_aspect('equal')  # Встановлює однаковий масштаб по осях, щоб трикутники виглядали правильними.
    ax.set_axis_off()  # Вимикає відображення осей.
    vertices = [[0, 0], [0.5, 0.75], [1, 0]]  # Визначає початкові вершини трикутника.
    sierpinski(vertices, 9, ax)  # Викликає функцію 'sierpinski' для малювання трикутника Серпінського з рівнем рекурсії 3.
    plt.show()  # Відображає малюнок на екрані.

main()  # Викликає основну функцію для виконання всього коду.


# import turtle  # Імпортує модуль turtle, який використовується для створення графіки з черепашками (turtles).

# def koch_curve(t, order, size):
#     """
#     Малює криву Коха.
#     t: об'єкт turtle для малювання
#     order: порядок кривої (рекурсивна глибина)
#     size: розмір сегменту кривої
#     """
#     if order == 0:
#         t.forward(size)  # Якщо порядок дорівнює 0, черепашка просто рухається вперед на відстань size.
#     else:
#         for angle in [60, -120, 60, 0]:  # В іншому випадку, повторює чотири рази з кутами повороту 60, -120, 60, і 0 градусів.
#             koch_curve(t, order - 1, size / 3)  # Рекурсивно викликає функцію з меншим порядком і розміром в 1/3.
#             t.left(angle)  # Повертає черепашку на відповідний кут.

# def draw_koch_snowflake(order, size=300):
#     """
#     Налаштовує середовище для малювання сніжинки Коха.
#     order: порядок кривої
#     size: розмір сніжинки (за замовчуванням 300)
#     """
#     window = turtle.Screen()  # Створює вікно для малювання.
#     window.bgcolor("black")  # Встановлює білий фон для вікна.

#     t = turtle.Turtle()  # Створює об'єкт turtle для малювання.
#     t.color("white")  # Встановлює білий колір для черепашки.
#     t.speed(0)  # Встановлює максимальну швидкість черепашки.
#     t.penup()  # Піднімає перо, щоб перемістити черепашку без малювання.
#     t.goto(-size / 2, size / 3)  # Переміщує черепашку на початкову позицію для малювання першої сторони трикутника.
#     t.pendown()  # Опускає перо для початку малювання.

#     for і in range(3):  # Малює три сторони трикутника.
#         koch_curve(t, order, size)  # Викликає функцію для малювання кривої Коха.
#         t.right(120)  # Повертає черепашку на 120 градусів для малювання наступної сторони.

#     window.mainloop()  # Запускає головний цикл вікна, щоб воно залишалося відкритим до закриття користувачем.

# # Виклик функції з можливістю вказати рівень рекурсії користувачем
# order = int(input("Введіть порядок кривої Коха: "))
# draw_koch_snowflake(order)  # Викликає функцію для малювання сніжинки Коха з порядком, вказаним користувачем.2



